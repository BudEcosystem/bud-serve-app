"""merge_evaluations_into_runs_simple

Revision ID: f39423ac0627
Revises: d4cdf87c51b7
Create Date: 2025-07-18 03:11:56.556192

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from alembic_postgresql_enum import TableReference
from sqlalchemy.dialects import postgresql


# revision identifiers, used by Alembic.
revision: str = "f39423ac0627"
down_revision: Union[str, None] = "d4cdf87c51b7"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column("exp_metrics", sa.Column("run_id", sa.UUID(), nullable=False))
    op.drop_constraint(op.f("uq_expmetrics_evaluation_metric_mode"), "exp_metrics", type_="unique")
    op.create_unique_constraint("uq_expmetrics_run_metric_mode", "exp_metrics", ["run_id", "metric_name", "mode"])
    op.create_foreign_key(None, "exp_metrics", "runs", ["run_id"], ["id"])
    op.drop_column("exp_metrics", "evaluation_id")
    op.add_column("exp_raw_results", sa.Column("run_id", sa.UUID(), nullable=False))
    op.drop_constraint(op.f("uq_exprawresults_evaluation"), "exp_raw_results", type_="unique")
    op.create_unique_constraint("uq_exprawresults_run", "exp_raw_results", ["run_id"])
    op.create_foreign_key(None, "exp_raw_results", "runs", ["run_id"], ["id"])
    op.drop_column("exp_raw_results", "evaluation_id")
    op.add_column("runs", sa.Column("run_index", sa.Integer(), nullable=False))
    op.add_column("runs", sa.Column("model_id", sa.UUID(), nullable=False))
    op.add_column("runs", sa.Column("dataset_version_id", sa.UUID(), nullable=False))
    op.add_column("runs", sa.Column("config", postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.create_unique_constraint("uq_run_experiment_index", "runs", ["experiment_id", "run_index"])
    op.create_foreign_key(None, "runs", "exp_dataset_versions", ["dataset_version_id"], ["id"])
    op.create_foreign_key(None, "runs", "exp_models", ["model_id"], ["id"])
    op.drop_column("runs", "description")
    op.drop_column("runs", "name")
    op.sync_enum_values(
        enum_schema="public",
        enum_name="run_status_enum",
        new_values=["pending", "running", "completed", "failed", "cancelled", "skipped", "deleted"],
        affected_columns=[TableReference(table_schema="public", table_name="runs", column_name="status")],
        enum_values_to_rename=[],
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.sync_enum_values(
        enum_schema="public",
        enum_name="run_status_enum",
        new_values=["pending", "running", "completed", "failed", "cancelled", "deleted"],
        affected_columns=[TableReference(table_schema="public", table_name="runs", column_name="status")],
        enum_values_to_rename=[],
    )
    op.add_column("runs", sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column("runs", sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_constraint(None, "runs", type_="foreignkey")
    op.drop_constraint(None, "runs", type_="foreignkey")
    op.drop_constraint("uq_run_experiment_index", "runs", type_="unique")
    op.drop_column("runs", "config")
    op.drop_column("runs", "dataset_version_id")
    op.drop_column("runs", "model_id")
    op.drop_column("runs", "run_index")
    op.add_column("exp_raw_results", sa.Column("evaluation_id", sa.UUID(), autoincrement=False, nullable=False))
    op.drop_constraint(None, "exp_raw_results", type_="foreignkey")
    op.drop_constraint("uq_exprawresults_run", "exp_raw_results", type_="unique")
    op.create_unique_constraint(
        op.f("uq_exprawresults_evaluation"), "exp_raw_results", ["evaluation_id"], postgresql_nulls_not_distinct=False
    )
    op.drop_column("exp_raw_results", "run_id")
    op.add_column("exp_metrics", sa.Column("evaluation_id", sa.UUID(), autoincrement=False, nullable=False))
    op.drop_constraint(None, "exp_metrics", type_="foreignkey")
    op.drop_constraint("uq_expmetrics_run_metric_mode", "exp_metrics", type_="unique")
    op.create_unique_constraint(
        op.f("uq_expmetrics_evaluation_metric_mode"),
        "exp_metrics",
        ["evaluation_id", "metric_name", "mode"],
        postgresql_nulls_not_distinct=False,
    )
    op.drop_column("exp_metrics", "run_id")
    # ### end Alembic commands ###
