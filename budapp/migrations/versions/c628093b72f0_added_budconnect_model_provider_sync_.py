"""Added Budconnect Model, Provider Sync Changes

Revision ID: c628093b72f0
Revises: 7de0638a4964
Create Date: 2025-05-22 09:06:43.875211

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from alembic_postgresql_enum import ColumnType
from alembic_postgresql_enum import TableReference
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'c628093b72f0'
down_revision: Union[str, None] = '7de0638a4964'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum('/v1/chat/completions', '/v1/completions', '/v1/images/generations', '/v1/audio/transcriptions', '/v1/audio/speech', '/v1/embeddings', '/v1/batch', '/v1/responses', '/v1/rerank', '/v1/moderations', name='model_endpoint_enum').create(op.get_bind())
    op.add_column('cloud_model', sa.Column('deprecation_date', sa.DateTime(timezone=True), nullable=True))
    op.add_column('cloud_model', sa.Column('supported_endpoints', postgresql.ARRAY(postgresql.ENUM('/v1/chat/completions', '/v1/completions', '/v1/images/generations', '/v1/audio/transcriptions', '/v1/audio/speech', '/v1/embeddings', '/v1/batch', '/v1/responses', '/v1/rerank', '/v1/moderations', name='model_endpoint_enum', create_type=False)), nullable=True))
    op.create_unique_constraint("cloud_model_uri_key", 'cloud_model', ['uri'])
    op.add_column('endpoint', sa.Column('is_deprecated', sa.Boolean(), nullable=False, server_default='false'))
    op.add_column('model', sa.Column('supported_endpoints', postgresql.ARRAY(postgresql.ENUM('/v1/chat/completions', '/v1/completions', '/v1/images/generations', '/v1/audio/transcriptions', '/v1/audio/speech', '/v1/embeddings', '/v1/batch', '/v1/responses', '/v1/rerank', '/v1/moderations', name='model_endpoint_enum', create_type=False)), nullable=True))
    op.add_column('provider', sa.Column('is_active', sa.Boolean(), nullable=False, server_default='true'))
    op.alter_column('provider', 'type',
               existing_type=postgresql.ENUM('nlp_cloud', 'deepinfra', 'anthropic', 'vertex_ai-vision-models', 'vertex_ai-ai21_models', 'cerebras', 'watsonx', 'predibase', 'volcengine', 'clarifai', 'baseten', 'sambanova', 'github', 'petals', 'replicate', 'vertex_ai-chat-models', 'azure_ai', 'perplexity', 'vertex_ai-code-text-models', 'vertex_ai-text-models', 'cohere_chat', 'vertex_ai-embedding-models', 'text-completion-openai', 'groq', 'openai', 'aleph_alpha', 'sagemaker', 'databricks', 'fireworks_ai', 'vertex_ai-anthropic_models', 'vertex_ai-mistral_models', 'voyage', 'vertex_ai-language-models', 'anyscale', 'deepseek', 'vertex_ai-image-models', 'mistral', 'ollama', 'cohere', 'gemini', 'friendliai', 'vertex_ai-code-chat-models', 'azure', 'codestral', 'vertex_ai-llama_models', 'together_ai', 'cloudflare', 'ai21', 'openrouter', 'bedrock', 'text-completion-codestral', 'huggingface', name='credential_type_enum'),
               type_=sa.String(),
               existing_nullable=False)
    op.create_unique_constraint("provider_type_key", 'provider', ['type'])
    
    # Drop the old enum type
    sa.Enum('nlp_cloud', 'deepinfra', 'anthropic', 'vertex_ai-vision-models', 'vertex_ai-ai21_models', 'cerebras', 'watsonx', 'predibase', 'volcengine', 'clarifai', 'baseten', 'sambanova', 'github', 'petals', 'replicate', 'vertex_ai-chat-models', 'azure_ai', 'perplexity', 'vertex_ai-code-text-models', 'vertex_ai-text-models', 'cohere_chat', 'vertex_ai-embedding-models', 'text-completion-openai', 'groq', 'openai', 'aleph_alpha', 'sagemaker', 'databricks', 'fireworks_ai', 'vertex_ai-anthropic_models', 'vertex_ai-mistral_models', 'voyage', 'vertex_ai-language-models', 'anyscale', 'deepseek', 'vertex_ai-image-models', 'mistral', 'ollama', 'cohere', 'gemini', 'friendliai', 'vertex_ai-code-chat-models', 'azure', 'codestral', 'vertex_ai-llama_models', 'together_ai', 'cloudflare', 'ai21', 'openrouter', 'bedrock', 'text-completion-codestral', 'huggingface', name='credential_type_enum').drop(op.get_bind())
    
    # Since the database is empty, we can simply drop and recreate the enum
    # First, drop the columns that use the enum
    op.drop_column('cloud_model', 'modality')
    op.drop_column('model', 'modality')
    
    # Drop the old enum
    op.execute("DROP TYPE IF EXISTS modality_enum")
    
    # Create the new enum
    sa.Enum('text_input', 'text_output', 'image_input', 'image_output', 'audio_input', 'audio_output', name='modality_enum').create(op.get_bind())
    
    # Add the columns back with the new enum type
    op.add_column('cloud_model', sa.Column('modality', postgresql.ARRAY(postgresql.ENUM('text_input', 'text_output', 'image_input', 'image_output', 'audio_input', 'audio_output', name='modality_enum', create_type=False)), nullable=True))
    op.add_column('model', sa.Column('modality', postgresql.ARRAY(postgresql.ENUM('text_input', 'text_output', 'image_input', 'image_output', 'audio_input', 'audio_output', name='modality_enum', create_type=False)), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # First, drop the columns that use the enum
    op.drop_column('cloud_model', 'modality')
    op.drop_column('model', 'modality')
    
    # Drop the new enum
    op.execute("DROP TYPE IF EXISTS modality_enum")
    
    # Create the old enum
    sa.Enum('llm', 'mllm', 'image', 'embedding', 'text_to_speech', 'speech_to_text', 'llm_embedding', 'mllm_embedding', name='modality_enum').create(op.get_bind())
    
    # Add the columns back with the old enum type
    op.add_column('cloud_model', sa.Column('modality', postgresql.ARRAY(postgresql.ENUM('llm', 'mllm', 'image', 'embedding', 'text_to_speech', 'speech_to_text', 'llm_embedding', 'mllm_embedding', name='modality_enum', create_type=False)), nullable=False))
    op.add_column('model', sa.Column('modality', postgresql.ARRAY(postgresql.ENUM('llm', 'mllm', 'image', 'embedding', 'text_to_speech', 'speech_to_text', 'llm_embedding', 'mllm_embedding', name='modality_enum', create_type=False)), nullable=False))
    
    # Create the credential_type_enum
    sa.Enum('nlp_cloud', 'deepinfra', 'anthropic', 'vertex_ai-vision-models', 'vertex_ai-ai21_models', 'cerebras', 'watsonx', 'predibase', 'volcengine', 'clarifai', 'baseten', 'sambanova', 'github', 'petals', 'replicate', 'vertex_ai-chat-models', 'azure_ai', 'perplexity', 'vertex_ai-code-text-models', 'vertex_ai-text-models', 'cohere_chat', 'vertex_ai-embedding-models', 'text-completion-openai', 'groq', 'openai', 'aleph_alpha', 'sagemaker', 'databricks', 'fireworks_ai', 'vertex_ai-anthropic_models', 'vertex_ai-mistral_models', 'voyage', 'vertex_ai-language-models', 'anyscale', 'deepseek', 'vertex_ai-image-models', 'mistral', 'ollama', 'cohere', 'gemini', 'friendliai', 'vertex_ai-code-chat-models', 'azure', 'codestral', 'vertex_ai-llama_models', 'together_ai', 'cloudflare', 'ai21', 'openrouter', 'bedrock', 'text-completion-codestral', 'huggingface', name='credential_type_enum').create(op.get_bind())
    
    # Handle the provider.type column conversion with explicit USING clause
    op.drop_constraint("provider_type_key", 'provider', type_='unique')
    
    # Use raw SQL to handle the type conversion with USING clause
    op.execute("""
    ALTER TABLE provider 
    ALTER COLUMN type TYPE credential_type_enum 
    USING type::credential_type_enum
    """)

    op.drop_column('provider', 'is_active')
    op.drop_column('model', 'supported_endpoints')
    op.drop_column('endpoint', 'is_deprecated')
    op.drop_constraint("cloud_model_uri_key", 'cloud_model', type_='unique')
    op.drop_column('cloud_model', 'supported_endpoints')
    op.drop_column('cloud_model', 'deprecation_date')
    sa.Enum('/v1/chat/completions', '/v1/completions', '/v1/images/generations', '/v1/audio/transcriptions', '/v1/audio/speech', '/v1/embeddings', '/v1/batch', '/v1/responses', '/v1/rerank', '/v1/moderations', name='model_endpoint_enum').drop(op.get_bind())
    # ### end Alembic commands ###
