"""evals-tables

Revision ID: 5ebb7b813ad4
Revises: c301ac188f1b
Create Date: 2025-07-07 09:37:38.203430

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql


# revision identifiers, used by Alembic.
revision: str = "5ebb7b813ad4"
down_revision: Union[str, None] = "c301ac188f1b"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum(
        "pending", "running", "completed", "failed", "cancelled", "skipped", "deleted", name="evaluation_status_enum"
    ).create(op.get_bind())
    sa.Enum("pending", "running", "completed", "failed", "cancelled", "deleted", name="run_status_enum").create(
        op.get_bind()
    )
    sa.Enum("active", "deleted", name="experiment_status_enum").create(op.get_bind())
    op.create_table(
        "eval_sync_state",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("manifest_version", sa.String(length=50), nullable=False),
        sa.Column("sync_timestamp", sa.String(), nullable=False),
        sa.Column("sync_status", sa.String(length=20), nullable=False),
        sa.Column("sync_metadata", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("modified_at", sa.DateTime(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "exp_datasets",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("meta_links", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("config_validation_schema", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("estimated_input_tokens", sa.Integer(), nullable=True),
        sa.Column("estimated_output_tokens", sa.Integer(), nullable=True),
        sa.Column("language", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("domains", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("concepts", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("humans_vs_llm_qualifications", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("task_type", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("modalities", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("sample_questions_answers", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("advantages_disadvantages", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("modified_at", sa.DateTime(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name", name="uq_expdataset_name"),
    )
    op.create_table(
        "exp_models",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("model_in_db", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("modified_at", sa.DateTime(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "exp_traits",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("icon", sa.String(), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("modified_at", sa.DateTime(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "exp_dataset_versions",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("dataset_id", sa.UUID(), nullable=False),
        sa.Column("version", sa.String(), nullable=False),
        sa.Column("meta", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("modified_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["dataset_id"],
            ["exp_datasets.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("dataset_id", "version", name="uq_expdatasetversion_dataset_version"),
    )
    op.create_table(
        "exp_traits_dataset_pivot",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("trait_id", sa.UUID(), nullable=False),
        sa.Column("dataset_id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("modified_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["dataset_id"],
            ["exp_datasets.id"],
        ),
        sa.ForeignKeyConstraint(
            ["trait_id"],
            ["exp_traits.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "experiments",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column(
            "status",
            postgresql.ENUM("active", "deleted", name="experiment_status_enum", create_type=False),
            nullable=False,
        ),
        sa.Column("created_by", sa.Uuid(), nullable=False),
        sa.Column("project_id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("modified_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["created_by"],
            ["user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["project_id"],
            ["project.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "runs",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("experiment_id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(), nullable=True),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column(
            "status",
            postgresql.ENUM(
                "pending",
                "running",
                "completed",
                "failed",
                "cancelled",
                "deleted",
                name="run_status_enum",
                create_type=False,
            ),
            nullable=False,
        ),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("modified_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["experiment_id"],
            ["experiments.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "evaluations",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("run_id", sa.UUID(), nullable=False),
        sa.Column("model_id", sa.UUID(), nullable=False),
        sa.Column("dataset_version_id", sa.UUID(), nullable=False),
        sa.Column(
            "status",
            postgresql.ENUM(
                "pending",
                "running",
                "completed",
                "failed",
                "cancelled",
                "skipped",
                "deleted",
                name="evaluation_status_enum",
                create_type=False,
            ),
            nullable=False,
        ),
        sa.Column("config", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("modified_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["dataset_version_id"],
            ["exp_dataset_versions.id"],
        ),
        sa.ForeignKeyConstraint(
            ["model_id"],
            ["exp_models.id"],
        ),
        sa.ForeignKeyConstraint(
            ["run_id"],
            ["runs.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "exp_metrics",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("evaluation_id", sa.UUID(), nullable=False),
        sa.Column("metric_name", sa.String(), nullable=False),
        sa.Column("mode", sa.String(), nullable=False),
        sa.Column("metric_value", sa.NUMERIC(precision=6, scale=2), nullable=False),
        sa.ForeignKeyConstraint(
            ["evaluation_id"],
            ["evaluations.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("evaluation_id", "metric_name", "mode", name="uq_expmetrics_evaluation_metric_mode"),
    )
    op.create_table(
        "exp_raw_results",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("evaluation_id", sa.UUID(), nullable=False),
        sa.Column("preview_results", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("full_results_uri", sa.Text(), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("modified_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["evaluation_id"],
            ["evaluations.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("evaluation_id", name="uq_exprawresults_evaluation"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("exp_raw_results")
    op.drop_table("exp_metrics")
    op.drop_table("evaluations")
    op.drop_table("runs")
    op.drop_table("experiments")
    op.drop_table("exp_traits_dataset_pivot")
    op.drop_table("exp_dataset_versions")
    op.drop_table("exp_traits")
    op.drop_table("exp_models")
    op.drop_table("exp_datasets")
    op.drop_table("eval_sync_state")
    sa.Enum("active", "deleted", name="experiment_status_enum").drop(op.get_bind())
    sa.Enum("pending", "running", "completed", "failed", "cancelled", "deleted", name="run_status_enum").drop(
        op.get_bind()
    )
    sa.Enum(
        "pending", "running", "completed", "failed", "cancelled", "skipped", "deleted", name="evaluation_status_enum"
    ).drop(op.get_bind())
    # ### end Alembic commands ###
